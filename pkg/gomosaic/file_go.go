package gomosaic

import (
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

var _ File = &GoFile{}

type GoFileOption func(*goFileOpts)

func UseTestPkg() GoFileOption {
	return func(o *goFileOpts) {
		o.useTestPkg = true
	}
}

type goFileOpts struct {
	useTestPkg bool
}

type GoFile struct {
	*jen.File

	packagePath string
}

func (f *GoFile) Render(w io.Writer, version string) error {
	f.HeaderComment("// Code generated by \"gomosaic " + strings.Join(os.Args[1:], " ") + "\" " + version + "; DO NOT EDIT.\n")
	f.Id("//go:build !gomosaic")
	if err := f.File.Render(w); err != nil {
		return err
	}

	return nil
}

func (f *GoFile) isCurrPkg(pkgPath string) bool {
	return strings.EqualFold(f.packagePath, pkgPath)
}

func (f *GoFile) Qual(pkgPath, name string) func(s *jen.Statement) {
	return func(s *jen.Statement) {
		if f.isCurrPkg(pkgPath) {
			s.Id(name)
		} else {
			s.Qual(pkgPath, name)
		}
	}
}

func NewGoFile(module *ModuleInfo, outputDir string, opts ...GoFileOption) *GoFile {
	o := &goFileOpts{}
	for _, optApply := range opts {
		optApply(o)
	}

	packagePath := strings.Replace(outputDir, module.Dir, "", -1)
	packagePath = filepath.Join(module.Path, strings.TrimLeft(packagePath, string(os.PathSeparator)))

	packageName := guessAlias(filepath.Base(outputDir))
	if o.useTestPkg {
		packagePath += "/_test"
		packageName += "_test"
	}

	return &GoFile{
		File:        jen.NewFile(packageName),
		packagePath: packagePath,
	}
}
